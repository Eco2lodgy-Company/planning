"use client";
// pages/index.js
import { useState, useEffect } from 'react';
import { format, parseISO, addDays, startOfWeek, endOfWeek, isSameDay, isWithinInterval } from 'date-fns';
import { fr } from 'date-fns/locale';
import { supabase } from '@/lib/SupabaseClient';





interface Task {
  id_tache: number;
  libelle: string;
  niveau: number;
  nom_complet: string;
  nom_projet: string;
  echeance: number;
  datedebut: string;
  status: string;
  nom_departement: string;
  priorite: number;
}

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [currentWeekStart, setCurrentWeekStart] = useState(startOfWeek(new Date(), { weekStartsOn: 1 }));
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState('week'); // 'week' ou 'list'
  

  const fetchDepartments = async () => {
    try {
      const response = await fetch("/api/tache");
      const result = await response.json();
      if (response.ok) {
        setTasks(result);
      } else {
        console.error("Erreur lors de la récupération des départements:", result.message);
      }
    } catch (error) {
      console.error("Erreur réseau lors de la récupération des départements:", error);
    }
  };

  useEffect(() => {
    fetchDepartments
    // En production, vous pourriez charger les données depuis une API
    // const tasksData = [
    //   {
    //     "id_tache": 5,
    //     "libelle": "Tâche 2",
    //     "niveau": 2,
    //     "id_user": 1,
    //     "id_projet": 3,
    //     "echeance": 10,
    //     "datedebut": "2025-02-07",
    //     "status": "En cours",
    //     "created_at": "2025-02-07 11:14:40.646844",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 26,
    //     "libelle": "Former les utilisateurs",
    //     "niveau": 1,
    //     "id_user": 5,
    //     "id_projet": 3,
    //     "echeance": 3,
    //     "datedebut": "2025-02-27",
    //     "status": "pending",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 29,
    //     "libelle": "Planifier la réunion",
    //     "niveau": 1,
    //     "id_user": 1,
    //     "id_projet": 3,
    //     "echeance": 2,
    //     "datedebut": "2025-02-15",
    //     "status": "en cours",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 31,
    //     "libelle": "Créer un prototype",
    //     "niveau": 3,
    //     "id_user": 5,
    //     "id_projet": 2,
    //     "echeance": 25,
    //     "datedebut": "2025-03-05",
    //     "status": "pending",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 34,
    //     "libelle": "Tester les performances",
    //     "niveau": 3,
    //     "id_user": 1,
    //     "id_projet": 2,
    //     "echeance": 18,
    //     "datedebut": "2025-02-22",
    //     "status": "pending",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 36,
    //     "libelle": "Déployer le projet",
    //     "niveau": 3,
    //     "id_user": 5,
    //     "id_projet": 3,
    //     "echeance": 11,
    //     "datedebut": "2025-03-10",
    //     "status": "pending",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 20,
    //     "libelle": "Développer le backend",
    //     "niveau": 3,
    //     "id_user": 4,
    //     "id_projet": 2,
    //     "echeance": 15,
    //     "datedebut": "2025-02-15",
    //     "status": "in_progress",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 25,
    //     "libelle": "Mettre en place l'API",
    //     "niveau": 3,
    //     "id_user": 4,
    //     "id_projet": 2,
    //     "echeance": 14,
    //     "datedebut": "2025-02-12",
    //     "status": "done",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 41,
    //     "libelle": "changer la couleur de l'interface",
    //     "niveau": 1,
    //     "id_user": 44,
    //     "id_projet": 7,
    //     "echeance": 18,
    //     "datedebut": "2025-02-13",
    //     "status": "done",
    //     "created_at": "2025-02-18 08:22:32.245784",
    //     "departement": 4,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 42,
    //     "libelle": "changer la couleur de la charte de la plateforme",
    //     "niveau": 1,
    //     "id_user": 4,
    //     "id_projet": 7,
    //     "echeance": 20,
    //     "datedebut": "2025-02-22",
    //     "status": "in progress",
    //     "created_at": "2025-02-18 08:23:44.25579",
    //     "departement": 1,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 44,
    //     "libelle": "Créer la maquette",
    //     "niveau": 3,
    //     "id_user": 1,
    //     "id_projet": 2,
    //     "echeance": 1675036800,
    //     "datedebut": "2025-02-20",
    //     "status": "en cours",
    //     "created_at": "2025-02-19 13:00:37.894191",
    //     "departement": 5,
    //     "priorite": 2
    //   },
    //   {
    //     "id_tache": 45,
    //     "libelle": "modification des pages",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 7,
    //     "echeance": 12,
    //     "datedebut": "2025-02-14",
    //     "status": "done",
    //     "created_at": "2025-02-19 14:21:24.772028",
    //     "departement": 1,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 22,
    //     "libelle": "Créer l'interface utilisateur",
    //     "niveau": 2,
    //     "id_user": 30,
    //     "id_projet": 2,
    //     "echeance": 20,
    //     "datedebut": "2025-03-01",
    //     "status": "done",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 48,
    //     "libelle": "configuerer le serveur",
    //     "niveau": 2,
    //     "id_user": 30,
    //     "id_projet": 4,
    //     "echeance": 2,
    //     "datedebut": "2025-02-25",
    //     "status": "done",
    //     "created_at": "2025-02-24 07:54:38.25659",
    //     "departement": 1,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 49,
    //     "libelle": "activer le certificat SSL",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 4,
    //     "echeance": 1,
    //     "datedebut": "2025-02-26",
    //     "status": "done",
    //     "created_at": "2025-02-24 07:58:25.00683",
    //     "departement": 1,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 50,
    //     "libelle": "mmmmmmmmmmmmmmm",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 16,
    //     "echeance": 1,
    //     "datedebut": "2025-02-28",
    //     "status": "done",
    //     "created_at": "2025-02-26 15:55:54.403301",
    //     "departement": 1,
    //     "priorite": 2
    //   },
    //   {
    //     "id_tache": 46,
    //     "libelle": "faire un push",
    //     "niveau": 2,
    //     "id_user": 30,
    //     "id_projet": 4,
    //     "echeance": 1,
    //     "datedebut": "2025-02-14",
    //     "status": "done",
    //     "created_at": "2025-02-19 14:21:57.303821",
    //     "departement": 1,
    //     "priorite": 2
    //   },
    //   {
    //     "id_tache": 40,
    //     "libelle": "creer un nouveau endpoint",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 7,
    //     "echeance": 4,
    //     "datedebut": "2025-02-18",
    //     "status": "done",
    //     "created_at": "2025-02-17 12:34:45.790251",
    //     "departement": 1,
    //     "priorite": 2
    //   },
    //   {
    //     "id_tache": 43,
    //     "libelle": "creer une nouvelle API",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 4,
    //     "echeance": 12,
    //     "datedebut": "2025-02-19",
    //     "status": "done",
    //     "created_at": "2025-02-19 12:09:56.976913",
    //     "departement": 1,
    //     "priorite": 1
    //   },
    //   {
    //     "id_tache": 39,
    //     "libelle": "creer une nouvelle api",
    //     "niveau": 2,
    //     "id_user": 30,
    //     "id_projet": 7,
    //     "echeance": 14,
    //     "datedebut": "2025-02-06",
    //     "status": "done",
    //     "created_at": "2025-02-17 12:00:21.04862",
    //     "departement": 1,
    //     "priorite": 2
    //   },
    //   {
    //     "id_tache": 37,
    //     "libelle": "Collecter les retours",
    //     "niveau": 1,
    //     "id_user": 30,
    //     "id_projet": 2,
    //     "echeance": 7,
    //     "datedebut": "2025-03-12",
    //     "status": "done",
    //     "created_at": "2025-02-11 09:53:27.904066",
    //     "departement": 5,
    //     "priorite": 1
    //   }
    // ];
const tasksData = tasks;
    
    // Extraire la liste unique des utilisateurs
    const uniqueUsers = [...new Set(tasksData.map(task => task.id_user))].map(id => {
      return {
        id: id,
        name: `Utilisateur ${id}` // En pratique, vous auriez un nom réel
      };
    });
    
    // Normaliser et enrichir les données de tâches
    const processedTasks = tasksData.map(task => {
      // Calculer la date de fin basée sur l'échéance
      const startDate = parseISO(task.datedebut);
      let endDateValue;
      
      // Vérifier si echeance est un timestamp Unix ou un nombre de jours
      if (task.echeance > 1000000000) { // Probablement un timestamp Unix
        endDateValue = new Date(task.echeance * 1000);
      } else { // Nombre de jours
        endDateValue = addDays(startDate, task.echeance);
      }
      
      return {
        ...task,
        startDate,
        endDate: endDateValue,
        status: task.status.toLowerCase().replace(/[\s_]/g, '')
      };
    });
    
    setTasks(processedTasks);
    setUsers(uniqueUsers);
    setSelectedUser(uniqueUsers.length > 0 ? uniqueUsers[0].id : null);
    setLoading(false);
    
    // Détection de la largeur d'écran pour définir le mode de vue initial
    const handleResize = () => {
      setViewMode(window.innerWidth < 768 ? 'list' : 'week');
    };
    
    // Définir le mode initial
    handleResize();
    
    // Écouter les changements de taille d'écran
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  // Vérifier si une date est dans la semaine courante
  const isInCurrentWeek = (date) => {
    const weekEnd = endOfWeek(currentWeekStart, { weekStartsOn: 1 });
    return isWithinInterval(date, { start: currentWeekStart, end: weekEnd });
  };
  
  // Générer les jours de la semaine courante
  const weekDays = Array.from({ length: 7 }, (_, i) => 
    addDays(currentWeekStart, i)
  );
  
  // Filtrer les tâches pour l'utilisateur sélectionné et la semaine en cours
  const filteredTasks = tasks.filter(task => {
    if (!selectedUser) return false;
    if (task.id_user !== selectedUser) return false;
    
    const weekEnd = endOfWeek(currentWeekStart, { weekStartsOn: 1 });
    
    // Vérifier si la tâche chevauche la semaine courante
    return isWithinInterval(task.startDate, { start: currentWeekStart, end: weekEnd }) || 
           isWithinInterval(task.endDate, { start: currentWeekStart, end: weekEnd }) ||
           (task.startDate <= currentWeekStart && task.endDate >= weekEnd);
  });
  
  // Changer de semaine
  const changeWeek = (direction) => {
    setCurrentWeekStart(prevWeek => 
      direction === 'next' 
        ? addDays(prevWeek, 7) 
        : addDays(prevWeek, -7)
    );
  };
  
  // Obtenir le style de couleur en fonction du statut
  const getStatusColor = (status) => {
    switch(status) {
      case 'done':
        return 'bg-green-200 border-green-600';
      case 'inprogress':
      case 'encours':
        return 'bg-blue-200 border-blue-600';
      case 'pending':
        return 'bg-yellow-200 border-yellow-600';
      default:
        return 'bg-gray-200 border-gray-600';
    }
  };
  
  // Vérifier si une tâche est affichée pour un jour donné
  const isTaskOnDay = (task, day) => {
    return isWithinInterval(day, { start: task.startDate, end: task.endDate }) ||
           isSameDay(day, task.startDate) || 
           isSameDay(day, task.endDate);
  };
  
  if (loading) {
    return <div className="flex justify-center items-center min-h-screen">Chargement...</div>;
  }
  
  return (
    <div className="container mx-auto p-2 md:p-4 flex flex-col h-screen bg-gray-50" style={{ width: '100%' }}>
      <h1 className="text-xl md:text-2xl font-bold mb-4 md:mb-6">Planification des tâches</h1>
      
      <div className="flex flex-col md:flex-row md:justify-between gap-4 mb-4">
        {/* Sélecteur d'utilisateur */}
        <div className="w-full md:w-64">
          <label className="block mb-1 font-semibold text-sm md:text-base">Sélectionner un utilisateur:</label>
          <select 
            className="p-2 border rounded w-full text-sm md:text-base"
            value={selectedUser || ''}
            onChange={(e) => setSelectedUser(Number(e.target.value))}
          >
            {users.map(user => (
              <option key={user.id} value={user.id}>{user.name}</option>
            ))}
          </select>
        </div>
        
        {/* Sélecteur de mode d'affichage */}
        <div className="w-full md:w-auto">
          <label className="block mb-1 font-semibold text-sm md:text-base">Mode d'affichage:</label>
          <div className="flex border rounded overflow-hidden">
            <button 
              className={`flex-1 p-2 text-sm md:text-base ${viewMode === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-100'}`}
              onClick={() => setViewMode('week')}
            >
              Vue semaine
            </button>
            <button 
              className={`flex-1 p-2 text-sm md:text-base ${viewMode === 'list' ? 'bg-blue-500 text-white' : 'bg-gray-100'}`}
              onClick={() => setViewMode('list')}
            >
              Vue liste
            </button>
          </div>
        </div>
      </div>
      
      {/* Navigation des semaines */}
      <div className="flex justify-between items-center mb-4 md:mb-6">
        <button 
          onClick={() => changeWeek('prev')}
          className="px-2 py-1 md:px-4 md:py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm md:text-base"
        >
          &larr; Précédente
        </button>
        
        <h2 className="text-base md:text-xl font-semibold truncate">
          Semaine du {format(currentWeekStart, 'dd MMM yyyy', { locale: fr })}
        </h2>
        
        <button 
          onClick={() => changeWeek('next')}
          className="px-2 py-1 md:px-4 md:py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm md:text-base"
        >
          Suivante &rarr;
        </button>
      </div>
      
      {/* Vue par semaine - adapté pour desktop */}
      {viewMode === 'week' && (
        <div className="overflow-x-auto pb-4">
          <div className="grid grid-cols-7 gap-1 md:gap-2 min-w-max">
            {/* Entêtes des jours */}
            {weekDays.map((day, index) => (
              <div key={index} className="text-center font-semibold p-1 md:p-2 border-b-2 text-xs md:text-sm">
                <div>{format(day, 'EEEE', { locale: fr })}</div>
                <div>{format(day, 'dd/MM')}</div>
              </div>
            ))}
            
            {/* Cellules des jours */}
            {weekDays.map((day, dayIndex) => (
              <div key={dayIndex} className="min-h-32 p-1 md:p-2 border rounded bg-gray-50">
                {filteredTasks
                  .filter(task => isTaskOnDay(task, day))
                  .map((task, taskIndex) => (
                    <div 
                      key={taskIndex}
                      className={`p-1 md:p-2 mb-1 md:mb-2 rounded border-l-4 text-xs md:text-sm ${getStatusColor(task.status)}`}
                    >
                      <div className="font-semibold truncate">{task.libelle}</div>
                      <div className="text-xs">
                        {format(task.startDate, 'dd/MM')} - {format(task.endDate, 'dd/MM')}
                      </div>
                      <div className="text-xs capitalize">
                        {task.status.replace(/([A-Z])/g, ' $1').trim()}
                      </div>
                    </div>
                  ))}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Vue liste - optimisée pour mobile */}
      {viewMode === 'list' && (
        <div className="space-y-2">
          {weekDays.map((day, dayIndex) => {
            const dayTasks = filteredTasks.filter(task => isTaskOnDay(task, day));
            
            return (
              <div key={dayIndex} className="border rounded overflow-hidden">
                <div className="bg-gray-100 p-2 font-semibold text-sm md:text-base">
                  {format(day, 'EEEE dd MMMM', { locale: fr })}
                </div>
                
                {dayTasks.length === 0 ? (
                  <div className="p-2 text-sm text-gray-500">Aucune tâche</div>
                ) : (
                  <div className="divide-y">
                    {dayTasks.map((task, taskIndex) => (
                      <div 
                        key={taskIndex}
                        className={`p-2 ${getStatusColor(task.status)}`}
                      >
                        <div className="flex justify-between">
                          <span className="font-medium">{task.libelle}</span>
                          <span className="text-xs bg-white px-2 py-1 rounded">
                            {format(task.startDate, 'dd/MM')} - {format(task.endDate, 'dd/MM')}
                          </span>
                        </div>
                        <div className="flex justify-between mt-1 text-sm">
                          <span>Projet: {task.id_projet}</span>
                          <span>Niveau: {task.niveau}</span>
                          <span className="capitalize">{task.status.replace(/([A-Z])/g, ' $1').trim()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      )}
      
      {/* Légende */}
      <div className="mt-4 md:mt-6 border-t pt-2 md:pt-4">
        <h3 className="font-semibold mb-1 md:mb-2 text-sm md:text-base">Légende des statuts:</h3>
        <div className="flex flex-wrap gap-2 md:gap-4 text-xs md:text-sm">
          <div className="flex items-center">
            <div className="w-3 h-3 md:w-4 md:h-4 bg-green-200 border border-green-600 mr-1 md:mr-2"></div>
            <span>Terminé</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 md:w-4 md:h-4 bg-blue-200 border border-blue-600 mr-1 md:mr-2"></div>
            <span>En cours</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 md:w-4 md:h-4 bg-yellow-200 border border-yellow-600 mr-1 md:mr-2"></div>
            <span>En attente</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 md:w-4 md:h-4 bg-gray-200 border border-gray-600 mr-1 md:mr-2"></div>
            <span>Autre</span>
          </div>
        </div>
      </div>
    </div>
  );
}